#include <QSpinBox>
#include <QLineEdit>
#include <QValidator>
#include <QRegExpValidator>
#include <QString>

class HexSpinBox : public QSpinBox {
    Q_OBJECT

public:
    explicit HexSpinBox(QWidget* parent = nullptr)
        : QSpinBox(parent) {
        setDisplayIntegerBase(16); // Устанавливаем HEX формат
        setRange(0, 0xFF);        // Устанавливаем начальное значение
        setValue(0);              // Начальное значение

        // Устанавливаем валидатор на lineEdit
        updateMaxDigits();
        updateValidator();
    }

    void setMaxValue(int maxValue) {
        setMaximum(maxValue);
        updateMaxDigits();
        updateValidator();
    }

protected:
    // Форматируем вывод с ведущими нулями
    QString textFromValue(int value) const override {
        return QString("%1").arg(value, maxDigits, 16, QLatin1Char('0')).toUpper();
    }

    // Конвертация текста в значение
    int valueFromText(const QString& text) const override {
        bool ok;
        int value = text.toInt(&ok, 16);
        return ok ? value : 0;
    }

    // Валидатор для ограничения количества символов
    QValidator::State validate(QString& input, int& pos) const override {
        if (input.length() > maxDigits) {
            return QValidator::Invalid;
        }
        bool ok;
        input.toInt(&ok, 16);
        return ok ? QValidator::Acceptable : QValidator::Invalid;
    }

    // Обрабатываем шаг как изменение на 1 бит
    void stepBy(int steps) override {
        setValue(value() + steps);
    }

private:
    int maxDigits; // Количество цифр в отображении

    void updateMaxDigits() {
        maxDigits = QString::number(maximum(), 16).length();
    }

    void updateValidator() {
        if (QLineEdit* edit = lineEdit()) {
            QString pattern = QString("^[0-9a-fA-F]{1,%1}$").arg(maxDigits);
            QValidator* validator = new QRegExpValidator(QRegExp(pattern), this);
            edit->setValidator(validator);
        }
    }
};
