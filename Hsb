#include <QSpinBox>
#include <QValidator>
#include <QRegExpValidator>
#include <QKeyEvent>

class HexSpinBox : public QSpinBox {
    Q_OBJECT

public:
    explicit HexSpinBox(QWidget* parent = nullptr) 
        : QSpinBox(parent), maxDigits(4) {
        setDisplayIntegerBase(16);  // Устанавливаем HEX формат
        setRange(0, 0xFFFF);       // Устанавливаем диапазон значений
        setValue(0);               // Начальное значение

        // Валидатор для ввода HEX символов
        QRegExp hexRegex("^[0-9a-fA-F]{1,4}$");
        setValidator(new QRegExpValidator(hexRegex, this));

        // Устанавливаем ширину для отображения ведущих нулей
        updateMaxDigits();
    }

    void setMaxValue(int maxValue) {
        setMaximum(maxValue);
        updateMaxDigits();
    }

protected:
    // Форматируем вывод с ведущими нулями
    QString textFromValue(int value) const override {
        return QString("%1").arg(value, maxDigits, 16, QLatin1Char('0')).toUpper();
    }

    // Конвертация текста в значение
    int valueFromText(const QString& text) const override {
        bool ok;
        return text.toInt(&ok, 16); // Преобразуем из HEX в int
    }

    // Установка валидатора
    QValidator::State validate(QString& input, int& pos) const override {
        return validator->validate(input, pos);
    }

    // Обрабатываем шаг как изменение на 1 бит
    void stepBy(int steps) override {
        setValue(value() + steps);
    }

private:
    int maxDigits;                // Количество цифр в отображении
    QValidator* validator;        // Валидатор для проверки ввода

    // Обновляем количество отображаемых цифр
    void updateMaxDigits() {
        maxDigits = QString::number(maximum(), 16).length();
        setFixedWidth(maxDigits * fontMetrics().horizontalAdvance('0'));
    }
};
