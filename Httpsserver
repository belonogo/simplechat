#include <QTcpServer>
#include <QSslSocket>
#include <QSslKey>
#include <QSslCertificate>
#include <QJsonDocument>
#include <QJsonObject>
#include <QFile>
#include <QDebug>

class HttpsServer : public QTcpServer {
    Q_OBJECT

public:
    explicit HttpsServer(QObject* parent = nullptr)
        : QTcpServer(parent) {}

    bool startServer(const QString& certFile, const QString& keyFile, quint16 port) {
        // Загружаем сертификат и ключ
        if (!loadSslConfiguration(certFile, keyFile)) {
            return false;
        }

        // Запускаем сервер
        if (!listen(QHostAddress::Any, port)) {
            qCritical() << "Failed to start server:" << errorString();
            return false;
        }

        qDebug() << "HTTPS server started on port" << port;
        return true;
    }

protected:
    void incomingConnection(qintptr socketDescriptor) override {
        auto sslSocket = new QSslSocket(this);

        if (!sslSocket->setSocketDescriptor(socketDescriptor)) {
            qCritical() << "Failed to set socket descriptor";
            sslSocket->deleteLater();
            return;
        }

        // Устанавливаем SSL-конфигурацию
        sslSocket->setSslConfiguration(sslConfig);

        // Подключаемся к сигналам для обработки
        connect(sslSocket, &QSslSocket::encrypted, this, [sslSocket, this]() {
            connect(sslSocket, &QSslSocket::readyRead, this, [sslSocket, this]() {
                processRequest(sslSocket);
            });
        });

        connect(sslSocket, &QSslSocket::disconnected, sslSocket, &QSslSocket::deleteLater);

        // Начинаем SSL шейк-хенд
        sslSocket->startServerEncryption();
    }

private:
    QSslConfiguration sslConfig;

    bool loadSslConfiguration(const QString& certFile, const QString& keyFile) {
        QFile certFileObj(certFile);
        QFile keyFileObj(keyFile);

        if (!certFileObj.open(QIODevice::ReadOnly)) {
            qCritical() << "Failed to open certificate file:" << certFile;
            return false;
        }

        if (!keyFileObj.open(QIODevice::ReadOnly)) {
            qCritical() << "Failed to open key file:" << keyFile;
            return false;
        }

        QSslCertificate certificate(&certFileObj, QSsl::Pem);
        QSslKey key(&keyFileObj, QSsl::Rsa, QSsl::Pem);

        certFileObj.close();
        keyFileObj.close();

        if (certificate.isNull() || key.isNull()) {
            qCritical() << "Invalid certificate or key";
            return false;
        }

        sslConfig.setLocalCertificate(certificate);
        sslConfig.setPrivateKey(key);
        sslConfig.setPeerVerifyMode(QSslSocket::VerifyNone);

        return true;
    }

    void processRequest(QSslSocket* sslSocket) {
        QByteArray requestData = sslSocket->readAll();
        QJsonDocument requestDoc = QJsonDocument::fromJson(requestData);

        if (requestDoc.isNull() || !requestDoc.isObject()) {
            sendError(sslSocket, "Invalid JSON format");
            return;
        }

        QJsonObject request = requestDoc.object();
        QJsonObject response = processJsonRequest(request);

        QJsonDocument responseDoc(response);
        sslSocket->write(responseDoc.toJson(QJsonDocument::Compact));
    }

    QJsonObject processJsonRequest(const QJsonObject& request) {
        QJsonObject response;
        QString command = request.value("command").toString();

        if (command == "ping") {
            response["status"] = "ok";
            response["data"] = "pong";
        } else if (command == "echo") {
            response["status"] = "ok";
            response["data"] = request.value("data");
        } else {
            response["status"] = "error";
            response["message"] = "Unknown command";
        }

        return response;
    }

    void sendError(QSslSocket* socket, const QString& errorMessage) {
        QJsonObject errorResponse;
        errorResponse["status"] = "error";
        errorResponse["message"] = errorMessage;

        QJsonDocument errorDoc(errorResponse);
        socket->write(errorDoc.toJson(QJsonDocument::Compact));
    }
};

// Main function
#include <QCoreApplication>

int main(int argc, char* argv[]) {
    QCoreApplication app(argc, argv);

    HttpsServer server;
    if (!server.startServer("cert.pem", "key.pem", 8443)) {
        return 1;
    }

    return app.exec();
}
