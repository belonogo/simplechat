Ниже один из вариантов, как **аккуратнее развести** номера строк (слева) и сам «hex-столбец» (справа). Основная идея:

1. **Ввести дополнительный отступ (gap) между колонкой номеров и колонкой с hex-данными.**  
2. **Сделать небольшие поля (padding) внутри области номера**, чтобы сам текст номера не прилипал к левому/правому краю.  

Ниже пример кода, где:

- В конструкторе настраиваем:
  - \(m\_\text{lineNumberWidth}\) — ширина области для номеров строк.
  - \(m\_\text{lineNumberGap}\)   — отступ между номерами и hex-данными.  
- В методе `drawLineNumber()` делаем небольшой внутренний отступ слева и справа (padding).
- В методе `byteRect()` учитываем этот gap, чтобы hex начинался не вплотную к номерам.

---

## HexView.h

```cpp
#pragma once

#include <QAbstractScrollArea>
#include <QByteArray>
#include <QScrollBar>
#include <QPainter>
#include <QFontMetrics>
#include <QMouseEvent>
#include <QClipboard>
#include <QGuiApplication>
#include <QShortcut>

class HexView : public QAbstractScrollArea
{
    Q_OBJECT
public:
    explicit HexView(QWidget* parent = nullptr);
    ~HexView() override = default;

    void setData(const QByteArray& data);

    QString selectedHex() const;

public slots:
    void copySelection();

    QSize sizeHint() const override;

protected:
    void paintEvent(QPaintEvent* event) override;

    void mousePressEvent(QMouseEvent* event) override;
    void mouseMoveEvent(QMouseEvent* event) override;
    void mouseReleaseEvent(QMouseEvent* event) override;

private:
    // Данные
    QByteArray m_data;

    static const int BYTES_PER_LINE = 16;

    // Геометрия
    int m_lineHeight      = 0;
    int m_charWidth       = 0;

    // Ширина области для номеров строк (слева)
    int m_lineNumberWidth = 0;
    // Отступ между колонкой номеров и колонкой hex
    int m_lineNumberGap   = 0;
    // Ширина hex-области (только "00 " * BYTES_PER_LINE)
    int m_hexAreaWidth    = 0;

    bool m_selecting = false;
    int  m_selectionStart = -1;
    int  m_selectionEnd   = -1;

    int totalLineCount() const;
    QString byteToHex(unsigned char c) const;

    int  pointToByteOffset(const QPoint& pos) const;
    QRect byteRect(int byteIndex, int lineIndex) const;

    void updateScrollBar();
    void normalizeSelection(int &start, int &end) const;

    // Рисуем номер строки
    void drawLineNumber(QPainter &painter, int lineIndex, int yPos, const QFontMetrics &fm);
};
```

---

## HexView.cpp

```cpp
#include "HexView.h"

HexView::HexView(QWidget* parent)
    : QAbstractScrollArea(parent)
{
    // Моноширинный шрифт
    QFont font("Courier");
    font.setStyleHint(QFont::TypeWriter);
    setFont(font);

    QFontMetrics fm(font);
    m_lineHeight = fm.height();
    m_charWidth  = fm.averageCharWidth();

    // Для BYTES_PER_LINE = 16: на каждый байт "00 " → 3 символа
    // => 16 * 3 = 48 символов
    m_hexAreaWidth = 48 * m_charWidth;

    // Предположим, нам нужно ~5 цифр для номера (до ~99999 строк),
    // + небольшой запас по ширине:
    int maxLineDigits = 5; 
    m_lineNumberWidth = maxLineDigits * m_charWidth + 8;

    // Отступ между номерами и hex
    m_lineNumberGap   = 16;  // 16 пикселей

    auto copyShortcut = new QShortcut(QKeySequence::Copy, this);
    connect(copyShortcut, &QShortcut::activated, this, &HexView::copySelection);
}

void HexView::setData(const QByteArray& data)
{
    m_data = data;
    m_selectionStart = -1;
    m_selectionEnd   = -1;

    updateScrollBar();
    viewport()->update();
}

QSize HexView::sizeHint() const
{
    // Общая ширина: ширина номера + gap + hex
    int w = m_lineNumberWidth + m_lineNumberGap + m_hexAreaWidth;
    // Высота ~ на 25 строк
    int h = m_lineHeight * 25;
    return QSize(w, h);
}

void HexView::paintEvent(QPaintEvent* /*event*/)
{
    QPainter painter(viewport());
    painter.setFont(font());

    QFontMetrics fm(painter.font());

    int firstVisibleLine = verticalScrollBar()->value();
    int linesPerPage = viewport()->height() / m_lineHeight;

    int selStart, selEnd;
    normalizeSelection(selStart, selEnd);

    for (int line = 0; line < linesPerPage; ++line) {
        int lineIndex = firstVisibleLine + line;
        if (lineIndex >= totalLineCount()) break;

        int y = line * m_lineHeight;

        // (1) Рисуем номер строки
        drawLineNumber(painter, lineIndex, y, fm);

        // (2) Рисуем Hex
        int byteStart = lineIndex * BYTES_PER_LINE;
        int byteEnd   = qMin(byteStart + BYTES_PER_LINE, m_data.size());

        for (int b = byteStart; b < byteEnd; ++b) {
            bool inSelection = (selStart >= 0 && selEnd >= 0 &&
                                b >= selStart && b < selEnd);

            QRect r = byteRect(b, lineIndex);

            if (inSelection) {
                painter.fillRect(r, QBrush(QColor("#3399FF")));
                painter.setPen(Qt::white);
            } else {
                painter.setPen(Qt::black);
            }

            QString hexPart = byteToHex(static_cast<unsigned char>(m_data[b])) + " ";
            painter.drawText(r.left(), r.top() + fm.ascent(), hexPart);
        }
    }
}

void HexView::mousePressEvent(QMouseEvent* event)
{
    if (event->button() == Qt::LeftButton) {
        m_selecting = true;
        int offset = pointToByteOffset(event->pos());
        m_selectionStart = offset;
        m_selectionEnd   = offset;
        viewport()->update();
    }
    QAbstractScrollArea::mousePressEvent(event);
}

void HexView::mouseMoveEvent(QMouseEvent* event)
{
    if (m_selecting) {
        int offset = pointToByteOffset(event->pos());
        m_selectionEnd = offset;
        viewport()->update();
    }
    QAbstractScrollArea::mouseMoveEvent(event);
}

void HexView::mouseReleaseEvent(QMouseEvent* event)
{
    if (event->button() == Qt::LeftButton) {
        m_selecting = false;
        int offset = pointToByteOffset(event->pos());
        m_selectionEnd = offset;
        viewport()->update();
    }
    QAbstractScrollArea::mouseReleaseEvent(event);
}

QString HexView::selectedHex() const
{
    int selStart, selEnd;
    normalizeSelection(selStart, selEnd);
    if (selStart < 0 || selEnd < 0 || selStart >= selEnd) {
        return QString();
    }
    QByteArray chunk = m_data.mid(selStart, selEnd - selStart);

    QString hexResult;
    for (unsigned char c : chunk) {
        hexResult += byteToHex(c) + ' ';
    }
    return hexResult.trimmed();
}

void HexView::copySelection()
{
    QString hexStr = selectedHex();
    if (!hexStr.isEmpty()) {
        QClipboard* clipboard = QGuiApplication::clipboard();
        clipboard->setText(hexStr);
    }
}

int HexView::totalLineCount() const
{
    if (m_data.isEmpty()) return 0;
    return (m_data.size() + BYTES_PER_LINE - 1) / BYTES_PER_LINE;
}

QString HexView::byteToHex(unsigned char c) const
{
    return QString("%1").arg(c, 2, 16, QLatin1Char('0')).toUpper();
}

int HexView::pointToByteOffset(const QPoint& pos) const
{
    // Учитываем, что слева -> m_lineNumberWidth + m_lineNumberGap
    // если клик левее, значит offset = 0 (или минимальный)
    int x = pos.x() - (m_lineNumberWidth + m_lineNumberGap);
    if (x < 0) {
        return 0;
    }

    int line = pos.y() / m_lineHeight;
    line += verticalScrollBar()->value();
    if (line < 0) return 0;
    if (line >= totalLineCount()) return m_data.size();

    // в каждой строке 16 байт, ширина каждого байта = 3 символа
    int byteInLine = x / (3 * m_charWidth);
    if (byteInLine < 0) byteInLine = 0;
    if (byteInLine > BYTES_PER_LINE) byteInLine = BYTES_PER_LINE;

    int offset = line * BYTES_PER_LINE + byteInLine;
    if (offset > m_data.size()) offset = m_data.size();
    return offset;
}

QRect HexView::byteRect(int byteIndex, int lineIndex) const
{
    int byteInLine = byteIndex % BYTES_PER_LINE;

    // смещение по X (учитываем область номера + gap)
    int x = m_lineNumberWidth + m_lineNumberGap + byteInLine * (3 * m_charWidth);

    int lineOffset = lineIndex - verticalScrollBar()->value();
    int y = lineOffset * m_lineHeight;

    return QRect(x, y, 3 * m_charWidth, m_lineHeight);
}

void HexView::updateScrollBar()
{
    int lineCount = totalLineCount();
    verticalScrollBar()->setRange(0, qMax(0, lineCount - 1));
    verticalScrollBar()->setPageStep(viewport()->height() / m_lineHeight);
    verticalScrollBar()->setSingleStep(1);
}

void HexView::normalizeSelection(int &start, int &end) const
{
    start = m_selectionStart;
    end   = m_selectionEnd;

    if (start < 0 && end < 0) return;
    if (start < 0) start = end;
    if (end < 0)   end   = start;

    if (start > end) {
        qSwap(start, end);
    }
    if (start < 0) start = 0;
    if (end   < 0) end   = 0;

    if (start > m_data.size()) start = m_data.size();
    if (end   > m_data.size()) end   = m_data.size();
}

void HexView::drawLineNumber(QPainter &painter, int lineIndex, int yPos, const QFontMetrics &fm)
{
    // Прямоугольник под номер
    QRect lnRect(0, yPos, m_lineNumberWidth, m_lineHeight);

    // Сам номер строки, напр. в десятичном
    QString lineStr = QString::number(lineIndex);

    painter.setPen(Qt::darkGray);

    // Добавим небольшие поля (padding) слева/справа,
    // чтобы текст не был «впритык»
    int leftPadding = 4;
    int rightPadding = 4;

    // textRect — область внутри lnRect с учётом отступов
    QRect textRect = lnRect.adjusted(leftPadding, 0, -rightPadding, 0);

    // выравнивание по правому краю и по центру по вертикали
    painter.drawText(textRect, Qt::AlignVCenter | Qt::AlignRight, lineStr);
}
```

### Пояснения к настройкам:

1. **`m_lineNumberWidth`** и **`m_lineNumberGap`**:  
   - `m_lineNumberWidth` — вся «полоса», от левого края виджета до начала «пробела» между колонками. Внутри неё рисуем номера, ещё оставляя небольшой `leftPadding`/`rightPadding`, чтобы текст номеров не упирался в край.  
   - `m_lineNumberGap = 16` — расстояние (в пикселях) между границей области номеров и началом колонки hex.  

2. **В `pointToByteOffset()`** вычитаем и `m_lineNumberWidth`, и `m_lineNumberGap`, чтобы «нулевой X для hex» был уже «после» этой области номеров (плюс отступ).

3. **В `drawLineNumber()`** используем `QRect::adjusted` для внутренних отступов (padding), чтобы номер не «прилипал» к границам прямоугольника.

Таким образом, номера строк окажутся **немного левее**, с небольшим **отступом от левого края**, а между ними и колонкой с hex-представлением будет более заметный «коридор» (gap). Всё это легко подстраивается под ваш вкус: можно увеличить/уменьшить `m_lineNumberGap`, поменять `leftPadding/rightPadding` или число символов в `m_lineNumberWidth`.
