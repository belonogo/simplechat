#include "HttpServer.h"

HttpServer::HttpServer(QObject *parent) : QTcpServer(parent) {}

bool HttpServer::startServer(quint16 port) {
    if (!listen(QHostAddress::Any, port)) {
        qCritical() << "Unable to start the server:" << errorString();
        return false;
    }
    qDebug() << "Server started on port" << port;
    return true;
}

void HttpServer::incomingConnection(qintptr socketDescriptor) {
    QTcpSocket *client = new QTcpSocket(this);
    if (!client->setSocketDescriptor(socketDescriptor)) {
        delete client;
        return;
    }
    connect(client, &QTcpSocket::readyRead, this, &HttpServer::handleRequest);
    connect(client, &QTcpSocket::disconnected, client, &QTcpSocket::deleteLater);
    qDebug() << "New client connected:" << client->peerAddress().toString();
}

void HttpServer::handleRequest() {
    QTcpSocket *client = qobject_cast<QTcpSocket *>(sender());
    if (!client)
        return;

    // Чтение запроса
    QByteArray requestData = client->readAll();

    // Простая обработка для проверки
    if (requestData.startsWith("POST")) {
        // Извлечение данных JSON из тела запроса
        int jsonStartIndex = requestData.indexOf("\r\n\r\n") + 4;
        QByteArray jsonData = requestData.mid(jsonStartIndex);
        processJsonRequest(jsonData, client);
    } else {
        client->disconnectFromHost();
    }
}

void HttpServer::processJsonRequest(const QByteArray &data, QTcpSocket *client) {
    QJsonDocument jsonDoc = QJsonDocument::fromJson(data);
    if (!jsonDoc.isObject()) {
        qWarning() << "Invalid JSON request";
        QJsonObject errorResponse;
        errorResponse["status"] = "error";
        errorResponse["message"] = "Invalid JSON format";
        sendJsonResponse(errorResponse, client);
        return;
    }

    QJsonObject request = jsonDoc.object();
    qDebug() << "Received JSON request:" << request;

    // Обработка запроса и создание ответа
    QJsonObject response;
    response["status"] = "success";
    response["received"] = request;

    sendJsonResponse(response, client);
}

void HttpServer::sendJsonResponse(const QJsonObject &response, QTcpSocket *client) {
    QJsonDocument jsonDoc(response);
    QByteArray responseData = "HTTP/1.1 200 OK\r\n"
                              "Content-Type: application/json\r\n"
                              "Content-Length: " + QByteArray::number(jsonDoc.toJson().size()) + "\r\n\r\n" +
                              jsonDoc.toJson();

    client->write(responseData);
    client->flush();
    client->disconnectFromHost();
}
