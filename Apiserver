
#include <QTcpServer>
#include <QTcpSocket>
#include <QJsonDocument>
#include <QJsonObject>
#include <QByteArray>
#include <QDebug>

class JsonApiServer : public QTcpServer {
    Q_OBJECT

public:
    explicit JsonApiServer(QObject* parent = nullptr) : QTcpServer(parent) {}

protected:
    void incomingConnection(qintptr socketDescriptor) override {
        auto clientSocket = new QTcpSocket(this);
        clientSocket->setSocketDescriptor(socketDescriptor);

        connect(clientSocket, &QTcpSocket::readyRead, this, [this, clientSocket]() {
            QByteArray requestData = clientSocket->readAll();
            QJsonDocument requestDoc = QJsonDocument::fromJson(requestData);
            if (requestDoc.isNull() || !requestDoc.isObject()) {
                sendError(clientSocket, "Invalid JSON format");
                return;
            }

            QJsonObject request = requestDoc.object();
            QJsonObject response = processRequest(request);

            QJsonDocument responseDoc(response);
            clientSocket->write(responseDoc.toJson(QJsonDocument::Compact));
        });

        connect(clientSocket, &QTcpSocket::disconnected, clientSocket, &QTcpSocket::deleteLater);
    }

private:
    QJsonObject processRequest(const QJsonObject& request) {
        QJsonObject response;
        QString command = request.value("command").toString();

        if (command == "ping") {
            response["status"] = "ok";
            response["data"] = "pong";
        } else if (command == "echo") {
            response["status"] = "ok";
            response["data"] = request.value("data");
        } else {
            response["status"] = "error";
            response["message"] = "Unknown command";
        }

        return response;
    }

    void sendError(QTcpSocket* socket, const QString& errorMessage) {
        QJsonObject errorResponse;
        errorResponse["status"] = "error";
        errorResponse["message"] = errorMessage;

        QJsonDocument errorDoc(errorResponse);
        socket->write(errorDoc.toJson(QJsonDocument::Compact));
    }
};

// Main function
#include <QCoreApplication>

int main(int argc, char* argv[]) {
    QCoreApplication a(argc, argv);

    JsonApiServer server;
    if (!server.listen(QHostAddress::Any, 12345)) {
        qCritical() << "Server failed to start:" << server.errorString();
        return 1;
    }

    qDebug() << "Server is running on port" << server.serverPort();
    return a.exec();
}
